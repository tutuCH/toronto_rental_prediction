{"resolvedId":"/Users/harrytu/Documents/my-projects/toronto_rental_prediction/src/components/Search.tsx","transforms":[{"name":"vite:load-fallback","result":"import type { Component } from \"solid-js\";\nimport { createSignal } from \"solid-js\";\nimport { PredictParam } from \"../data/dataDef\";\nimport { getLatLongByAddress, getPredictionByUserInput,} from \"../utils/apiServices\";\nimport { VsArrowRight } from 'solid-icons/vs'\nconst Search: Component<{onSearchChange: (newSearched: boolean) => void, onPriceChange: (newPrice: number) => void}> = (props) => {\n  const [address, setAddress] = createSignal(\"\");\n  const [bedroom, setBedroom] = createSignal(0);\n  const [bathroom, setBathroom] = createSignal(0);\n  const [den, setDen] = createSignal(0);\n  const setters: any = {\n    Bedroom: setBedroom,\n    Bathroom: setBathroom,\n    Den: setDen,\n  };\n  const maxSelectValue = 10;\n  const roomOptions = [\"Bedroom\", \"Bathroom\", \"Den\"];\n  const roomOptionDiv = Array.from(roomOptions, (_, i) => (\n    <select\n      onChange={(e: any) => {\n        handleSelectChange(_, e[\"target\"][\"value\"]);\n      }}\n      class=\"select select-primary max-w-xs rounded-full\"\n    > \n        <option disabled selected> {_} </option>\n            {Array.from({ length: maxSelectValue + 1 }, (_, i) => i).map((value) => (\n        <option value={value}>{value}</option>\n      ))}\n    </select>\n  ));\n\n  const handleSelectChange = (type: string, value: number) => {\n    const selectedType = setters[type];\n    return selectedType && selectedType(value);\n  };\n\n  const inputValidation = () => {\n    if(!address() || !bedroom() || !bathroom() || !den()){\n      alert(\"Please fill in all fields\")\n      return false\n    }\n    if(bedroom() === 0 || bathroom() === 0) {\n      alert(\"Please make sure the information are correct\")\n      return false\n    }\n    return true\n  }\n  const getPrediction = async () => {\n    if(!inputValidation()) {\n      return\n    }\n    const coordinates = await getLatLongByAddress(address());\n    const param: PredictParam = {\n      bedroom: bedroom(),\n      bathroom: bathroom(),\n      den: den(),\n      lat: coordinates[\"data\"][\"features\"][0][\"geometry\"][\"coordinates\"][1],\n      long: coordinates[\"data\"][\"features\"][0][\"geometry\"][\"coordinates\"][0],\n    };\n    const predictedPrice = await getPredictionByUserInput(param);\n    props.onSearchChange(true);\n    props.onPriceChange(JSON.parse(predictedPrice.data)[0][0])\n    return JSON.parse(predictedPrice.data)[0][0];\n  };\n  return (\n    <div class=\"mx-auto max-w-4xl py-32 sm:py-48 lg:py-56 h-full flex items-center justify-center\">\n      <div class=\"text-center opacity-80 rounded-lg\">\n          <h1 class=\"text-4xl font-bold tracking-tight text-green-800 sm:text-6xl\">\n          Rental Price Predictions\n          </h1>\n          <div class=\"relative mt-4 rounded-md shadow-sm\">\n          <textarea\n              class=\"w-full rounded-3xl h-8 textarea-primary textarea textarea-bordered\"\n              placeholder=\"Start by entering your address\"\n              onInput={(e) => setAddress(e.currentTarget.value)}\n          ></textarea>\n          </div>\n          <div class=\"flex gap-6 justify-center\">{roomOptionDiv}</div>\n          <div class=\"mt-10 flex items-center justify-center gap-x-6\">\n          <button class=\"flex items-center gap-1 rounded-full btn btn-primary\" onClick={() => getPrediction()}>Predict Now<VsArrowRight/></button>\n          </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Search;\n","start":1678988209914,"end":1678988209924},{"name":"solid","result":"import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { ssrAttribute as _$ssrAttribute } from \"solid-js/web\";\nimport { ssr as _$ssr } from \"solid-js/web\";\nimport { escape as _$escape } from \"solid-js/web\";\nimport { ssrHydrationKey as _$ssrHydrationKey } from \"solid-js/web\";\nconst _tmpl$ = [\"<select\", \" class=\\\"select select-primary max-w-xs rounded-full\\\"><option disabled selected> <!--#-->\", \"<!--/--> </option><!--#-->\", \"<!--/--></select>\"],\n  _tmpl$2 = [\"<option\", \">\", \"</option>\"],\n  _tmpl$3 = [\"<div\", \" class=\\\"mx-auto max-w-4xl py-32 sm:py-48 lg:py-56 h-full flex items-center justify-center\\\"><div class=\\\"text-center opacity-80 rounded-lg\\\"><h1 class=\\\"text-4xl font-bold tracking-tight text-green-800 sm:text-6xl\\\">Rental Price Predictions</h1><div class=\\\"relative mt-4 rounded-md shadow-sm\\\"><textarea class=\\\"w-full rounded-3xl h-8 textarea-primary textarea textarea-bordered\\\" placeholder=\\\"Start by entering your address\\\"></textarea></div><div class=\\\"flex gap-6 justify-center\\\">\", \"</div><div class=\\\"mt-10 flex items-center justify-center gap-x-6\\\"><button class=\\\"flex items-center gap-1 rounded-full btn btn-primary\\\">Predict Now<!--#-->\", \"<!--/--></button></div></div></div>\"];\nimport { createSignal } from \"solid-js\";\nimport { getLatLongByAddress, getPredictionByUserInput } from \"../utils/apiServices\";\nimport { VsArrowRight } from 'solid-icons/vs';\nconst Search = props => {\n  const [address, setAddress] = createSignal(\"\");\n  const [bedroom, setBedroom] = createSignal(0);\n  const [bathroom, setBathroom] = createSignal(0);\n  const [den, setDen] = createSignal(0);\n  const setters = {\n    Bedroom: setBedroom,\n    Bathroom: setBathroom,\n    Den: setDen\n  };\n  const maxSelectValue = 10;\n  const roomOptions = [\"Bedroom\", \"Bathroom\", \"Den\"];\n  const roomOptionDiv = Array.from(roomOptions, (_, i) => _$ssr(_tmpl$, _$ssrHydrationKey(), _$escape(_), _$escape(Array.from({\n    length: maxSelectValue + 1\n  }, (_, i) => i).map(value => _$ssr(_tmpl$2, _$ssrHydrationKey() + _$ssrAttribute(\"value\", _$escape(value, true), false), _$escape(value))))));\n  const handleSelectChange = (type, value) => {\n    const selectedType = setters[type];\n    return selectedType && selectedType(value);\n  };\n  const inputValidation = () => {\n    if (!address() || !bedroom() || !bathroom() || !den()) {\n      alert(\"Please fill in all fields\");\n      return false;\n    }\n    if (bedroom() === 0 || bathroom() === 0) {\n      alert(\"Please make sure the information are correct\");\n      return false;\n    }\n    return true;\n  };\n  const getPrediction = async () => {\n    if (!inputValidation()) {\n      return;\n    }\n    const coordinates = await getLatLongByAddress(address());\n    const param = {\n      bedroom: bedroom(),\n      bathroom: bathroom(),\n      den: den(),\n      lat: coordinates[\"data\"][\"features\"][0][\"geometry\"][\"coordinates\"][1],\n      long: coordinates[\"data\"][\"features\"][0][\"geometry\"][\"coordinates\"][0]\n    };\n    const predictedPrice = await getPredictionByUserInput(param);\n    props.onSearchChange(true);\n    props.onPriceChange(JSON.parse(predictedPrice.data)[0][0]);\n    return JSON.parse(predictedPrice.data)[0][0];\n  };\n  return _$ssr(_tmpl$3, _$ssrHydrationKey(), _$escape(roomOptionDiv), _$escape(_$createComponent(VsArrowRight, {})));\n};\nexport default Search;","start":1678988209924,"end":1678988209930,"order":"pre"}]}
